#!/bin/sh

# Check if we are on the main branch
current_branch=$(git symbolic-ref --short HEAD)
if [ "$current_branch" != "main" ]; then
  echo "You are not on the main branch. Please switch to the main branch."
  exit 1
fi

# Check if the local branch is up to date with origin
git fetch origin main
if [ $(git rev-parse HEAD) != $(git rev-parse @{u}) ]; then
  echo "The local main branch is not up to date with origin. Please pull the latest changes."
  exit 1
fi

# Check if version argument is provided
if [ $# -eq 1 ]; then
  version=$1
else
  # Prompt the user for input with a default value of "patch"
  read -p "Enter version type (major, minor, patch) [patch]: " version
fi

# Set the default if no input is provided
version=${version:-patch}

# Output the chosen version
echo "Bumping: $version"

# Get the next version number using svu
next_version=$(svu "$version")

# Check if svu command was successful
if [ $? -ne 0 ]; then
  echo "Failed to get the next version number using svu."
  exit 1
fi

# Create a new git tag with the next version number
git tag "$next_version"

# Check if git tag command was successful
if [ $? -ne 0 ]; then
  echo "Failed to create the git tag $next_version."
  exit 1
fi

# Push the new tag to origin
git push origin "$next_version"

# Check if git push command was successful
if [ $? -ne 0 ]; then
  echo "Failed to push the git tag $next_version to origin."
  exit 1
fi

echo "Successfully tagged and pushed version $next_version. Creating release..."

# Create a GitHub release
output=$(gh release create "$next_version" -t "$next_version" --generate-notes 2>&1)
exit_code=$?

if [ $exit_code -eq 0 ]; then
  echo "Successfully created release: $output."
else
  echo "Failed to create release: $output."
fi
