" Color scheme
colorscheme jellybeans+
let g:solarized_termcolors=256
" let g:dracula_inverse = 0
let g:dracula_colorterm = 0
set colorcolumn=120

" Transparent background
hi Normal ctermbg=none
hi NonText ctermbg=none
hi LineNr ctermbg=none

" Filter out junk from CtrlP and other searches
set wildignore+=*/tmp/*,*/spec/fixtures/cassettes/*,*/app/assets/images/*,*/public/*,*/log/*

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " Use ag instead of Ack
  let g:ackprg = 'ag --nogroup --nocolor --column'
endif

" Use FZF for CtrlP instead
noremap <silent> <C-P>          :FZF<CR>

" Strip trailing whitespace
function! <SID>StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" custom status line
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

" Syntax highlighting for deface/jbuilder files
au BufNewFile,BufRead *.erb.deface set filetype=eruby
au BufNewFile,BufRead *.json.jbuilder set filetype=ruby

" Set up vim-test
nmap <silent> <leader>r :TestFile<CR>
nmap <silent> <leader>R :TestNearest<CR>
let g:test#strategy = 'vimux'

" Run specs in split screen
let g:VimuxOrientation = 'h'
if (&columns > 200)
  let g:VimuxHeight = 30
else
  let g:VimuxHeight = 50
endif

" Use ctrl + s to save
noremap <silent> <C-S>          :update<CR>
vnoremap <silent> <C-S>         <C-C>:update<CR><Esc>
inoremap <silent> <C-S>         <C-O>:update<CR><Esc>

" Use ctrl + q to close
noremap <silent> <C-Q>          :q<CR>

" Open notes
noremap <silent> <leader>q          :10split ~/.dotfiles/notes.md <CR>

" Open Kaizen Sketchpad
noremap <silent> <leader>k          :10split ~/Documents/web-chapter/handbook/practices/kaizen-sketchpad.md <CR>

" Open memo
noremap <silent> <leader>m          :10split ~/.dotfiles/memo.md <CR>

" Auto-save and push notes file
autocmd BufWritePost * execute ':silent ! if [[ % == *.dotfiles/notes.md ]]; then gitdir=$(dirname %)/.git; worktree=$(dirname %); git --git-dir=$gitdir --work-tree=$worktree add % ; git --git-dir=$gitdir --work-tree=$worktree commit -m "Update notes.md"; git --git-dir=$gitdir --work-tree=$worktree push; fi > /dev/null 2>&1'

" Disable SCSS linting (too slow and often wrong)
let g:syntastic_scss_checkers=[]

" Move from diff to Gstatus view and stage file by pressing - twice
noremap <silent> - <C-w>k

" indent private methods
let g:ruby_indent_access_modifier_style="indent"

" Disable javascript snippets in html
let g:snipMate.scope_aliases['html'] = ''

" Use relative numbering
set rnu

" Use coffelint options if present
let coffee_lint_options = '-f .coffeelint.json'

" Add space before comments
let g:NERDSpaceDelims=1

" Run Prettier on save if a config file is present
let g:prettier#autoformat_require_pragma = 0
let g:prettier#autoformat_config_present = 1
let g:prettier#autoformat_config_files = [".prettierrc.json"]
